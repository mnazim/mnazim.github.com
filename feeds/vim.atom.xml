<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Mir Nazim</title><link href="http://mirnazim.org/" rel="alternate"></link><link href="http://mirnazim.org/feeds/vim.atom.xml" rel="self"></link><id>http://mirnazim.org/</id><updated>2011-08-14T17:00:00+02:00</updated><entry><title>List of vim plugins I use - with mini tutorials</title><link href="http://mirnazim.org/writings/vim-plugins-i-use" rel="alternate"></link><updated>2011-08-14T17:00:00+02:00</updated><author><name>Mir Nazim</name></author><id>tag:mirnazim.org,2011-08-14:writings/vim-plugins-i-use</id><summary type="html">&lt;p&gt;I am a vim user, and by user I mean I do all(not counting using the textarea inside the web browser) of my editing inside vim. Even when I need to use a word processor, I first type my content inside vim and then open the word processor to format it.&lt;/p&gt;
&lt;p&gt;As any vim user knows that Vim experience is not complete without the use of plugins, here is the list of plugins I use on daily basis.&lt;/p&gt;
&lt;h2&gt;A word about my vim setup&lt;/h2&gt;
&lt;p&gt;I manage my vim/bash configs in separate directory &lt;code&gt;~/dotfiles&lt;/code&gt;. Here is what it looks like.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ls
bash  bin  desktop  utils  vim
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;bash&lt;/code&gt; directory contains my my &lt;code&gt;.bashrc&lt;/code&gt;, &lt;code&gt;.bash_aliases&lt;/code&gt; etc. &lt;code&gt;bin&lt;/code&gt; - not same as &lt;code&gt;~/bin&lt;/code&gt;, contains scripts I use on day to day basis. &lt;code&gt;desktop&lt;/code&gt; contains contains configurations exported from my Ubuntu desktop apps(e.g. my compiz-unity profile).&lt;/p&gt;
&lt;p&gt;Here is what my &lt;code&gt;vim&lt;/code&gt; directory looks like&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ls
autoload  bundle  sessions  undodir  vimrc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Everything is &lt;em&gt;soft linked&lt;/em&gt; to the relevant locations from here as shown by following commands:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ln -s ~/dotfiles/vim ~/.vim
&lt;span class="nv"&gt;$ &lt;/span&gt;ln -s ~/dotfiles/vim/vimrc ~/.vimrc
&lt;span class="nv"&gt;$ &lt;/span&gt;ln -s ~/dotfiles/bash/bashrc ~/.bashrc
&lt;span class="nv"&gt;$ &lt;/span&gt;ln -s ~/dotfiles/bash/aliases ~/.bash_aliases
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;1. Pathogen: Vim package manager&lt;/h2&gt;
&lt;p&gt;&amp;raquo; &lt;a href="https://github.com/tpope/vim-pathogen"&gt;Github repository&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pathogen helps me keep the &lt;code&gt;.vim&lt;/code&gt; directory clean. When pathogen is used to manage plugins, it is the only plugin that needs to be installed directly by copying the files into &lt;code&gt;.vim&lt;/code&gt; directory.&lt;/p&gt;
&lt;h3&gt;Installation&lt;/h3&gt;
&lt;p&gt;I recommend starting with a blank &lt;code&gt;.vim&lt;/code&gt; directory.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mv ~/.vim ~/vim_old                                           &lt;span class="c"&gt;# 1. Backup your old .vim directory&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;mkdir .vim                                                    &lt;span class="c"&gt;# 2. Creat a blank .vim directory&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git clone git://github.com/tpope/vim-pathogen.git pathogen    &lt;span class="c"&gt;# 3. Clone the pathogen repo&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;mv pathogen/autoload ~/.vim/autoload                          &lt;span class="c"&gt;# 4. Move pathogen to .vim directory&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I also track my configurations with git; you can use whatever version control system you prefer(Hg, Bzr or God forbid svn).&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; .vim
&lt;span class="nv"&gt;$ &lt;/span&gt;git init
&lt;span class="nv"&gt;$ &lt;/span&gt;git add .
&lt;span class="nv"&gt;$ &lt;/span&gt;git commit -m &lt;span class="s2"&gt;&amp;quot;Initial commit&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now edit your &lt;code&gt;.vimrc&lt;/code&gt; and add following lines to the top&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;call&lt;/span&gt; pathogen#runtime_append_all_bundles&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;call&lt;/span&gt; pathogen#&lt;span class="k"&gt;helptags&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's it! Pathogen is now installed.&lt;/p&gt;
&lt;h3&gt;Usage&lt;/h3&gt;
&lt;p&gt;Any other plugins will be installed by simply copying the plugin files into &lt;code&gt;~/.vim/bundle/plugin_name&lt;/code&gt; directory. Generally, you will download the plugin, extract it and move to &lt;code&gt;~/.vim/bundle/plugin_name&lt;/code&gt;.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mv /path/to/plugin ~/.vim/bundle/plugin_name
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Although not required by pathogen, I prefer to manage plugins using &lt;a href="http://progit.org/book/ch6-6.html"&gt;git submodules&lt;/a&gt;. Let's install fugitive plugin for Git integration to demonstrate the process.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/.vim
&lt;span class="nv"&gt;$ &lt;/span&gt;git submodule add git://github.com/tpope/vim-fugitive.git bundle/fugitive
&lt;span class="nv"&gt;$ &lt;/span&gt;git submodule init &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git submodule update
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note: &lt;code&gt;git submodule init&lt;/code&gt; and &lt;code&gt;git submodule update&lt;/code&gt; need to be run every time a new submodule is added.  &lt;code&gt;git submodule foreach git pull&lt;/code&gt; command is used to pull latest upstream changes.&lt;/p&gt;
&lt;h2&gt;2. Command-t: Pattern based file opener&lt;/h2&gt;
&lt;p&gt;&amp;raquo; &lt;a href="https://wincent.com/products/command-t"&gt;Homepage&lt;/a&gt; &amp;raquo; &lt;a href="http://git.wincent.com/command-t.git"&gt;Git repository&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The Command-T plug-in for VIM provides an extremely fast, intuitive mechanism for opening files with a minimal number of keystrokes. It's named "Command-T" because it is inspired by the "Go to File" window bound to &lt;code&gt;Command-T&lt;/code&gt; key in TextMate.&lt;/p&gt;
&lt;p&gt;Files are selected by typing characters that appear in their paths, and are ordered by an algorithm which knows that characters that appear in certain locations (for example, immediately after a path separator) should be given more weight.&lt;/p&gt;
&lt;p&gt;Here are is a screenshot of command-t in action while writing this very blog post.&lt;/p&gt;
&lt;p&gt;&lt;a href="/media/img/content/command-t.png" title="Command-t"&gt;&lt;img alt="Command-t" src="/media/img/content/command-t.png" title="Command-t" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Installation&lt;/h3&gt;
&lt;p&gt;Command-t is developed in ruby therefore ruby needs to be installed on your system. Here is how to installation on Ubuntu.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo aptitude install ruby ruby-dev
&lt;span class="nv"&gt;$ &lt;/span&gt;git submodule add git://git.wincent.com/command-t.git bundle/command-t
&lt;span class="nv"&gt;$ &lt;/span&gt;git submodule init &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git submodule update
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/.vim/bundle/command-t/ruby/command-t/
&lt;span class="nv"&gt;$ &lt;/span&gt;ruby extconf.rb
&lt;span class="nv"&gt;$ &lt;/span&gt;make
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Detailed installation instructions are available at &lt;a href="https://wincent.com/products/command-t"&gt;Command-t homepage&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Usage&lt;/h3&gt;
&lt;p&gt;Command-t provides three functions&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;CommandT&lt;/code&gt; - opens filelist in current directory&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CommandTBuffer&lt;/code&gt; - opens currently open buffers&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CommandTFlush&lt;/code&gt; - re-read file list in current directory&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I have mapped these functions as following:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nb"&gt;noremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;o&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Esc&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:CommandT&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;noremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;O &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Esc&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:CommandTFlush&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;noremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;m&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Esc&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:CommandTBuffer&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;3. DelimitMate: Intelligent autocompletion for quotes, parenthesis, brackets etc.&lt;/h2&gt;
&lt;p&gt;&amp;raquo; &lt;a href="https://github.com/Raimondi/delimitMate"&gt;Github repository&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;DelimitMate provides automatic closing of quotes, parenthesis, brackets, etc., besides some other related features that make my time in insert mode a little bit easier.&lt;/p&gt;
&lt;h3&gt;Installation&lt;/h3&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/.vim
&lt;span class="nv"&gt;$ &lt;/span&gt;git submodule add git://github.com/Raimondi/delimitMate.git bundle/delmitmate
&lt;span class="nv"&gt;$ &lt;/span&gt;git submodule init &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git submodule update
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Usage&lt;/h3&gt;
&lt;p&gt;While I use delimitMate with default confirguration, it can be customized in quite a number of ways. See &lt;code&gt;:help delimitMate&lt;/code&gt; for detailed information on available confirguration options.&lt;/p&gt;
&lt;h2&gt;4. CloseTag: Intelligently close HTML tags&lt;/h2&gt;
&lt;p&gt;&amp;raquo; &lt;a href="http://github.com/docunext/closetag.vim"&gt;Github repository&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CloseTag is simple plugin that intelligently closes the html tags based of the currently open tag. It is triggered when you type &lt;code&gt;&amp;lt;/&lt;/code&gt;. CloseTag will detect and close the open tag intelligently.&lt;/p&gt;
&lt;h3&gt;Installation&lt;/h3&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/.vim
&lt;span class="nv"&gt;$ &lt;/span&gt;git submodule add git://github.com/docunext/closetag.vim.git bundle/closetag
&lt;span class="nv"&gt;$ &lt;/span&gt;git submodule init &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git submodule update
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Usage&lt;/h3&gt;
&lt;p&gt;For efficiency purposes I have configured CloseTag to load only for html/xml like files. Here is my &lt;code&gt;vimrc&lt;/code&gt; snippet for the same.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;autocmd &lt;span class="nb"&gt;FileType&lt;/span&gt; html&lt;span class="p"&gt;,&lt;/span&gt;htmldjango&lt;span class="p"&gt;,&lt;/span&gt;jinjahtml&lt;span class="p"&gt;,&lt;/span&gt;eruby&lt;span class="p"&gt;,&lt;/span&gt;mako &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;b&lt;/span&gt;:closetag_html_style&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
autocmd &lt;span class="nb"&gt;FileType&lt;/span&gt; html&lt;span class="p"&gt;,&lt;/span&gt;xhtml&lt;span class="p"&gt;,&lt;/span&gt;xml&lt;span class="p"&gt;,&lt;/span&gt;htmldjango&lt;span class="p"&gt;,&lt;/span&gt;jinjahtml&lt;span class="p"&gt;,&lt;/span&gt;eruby&lt;span class="p"&gt;,&lt;/span&gt;mako source &lt;span class="p"&gt;~&lt;/span&gt;&lt;span class="sr"&gt;/.vim/&lt;/span&gt;bundle&lt;span class="sr"&gt;/closetag/&lt;/span&gt;plugin/closetag.&lt;span class="k"&gt;vim&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;5. Pyflakes: Liniting for python files&lt;/h2&gt;
&lt;p&gt;&amp;raquo; &lt;a href="http://github.com/kevinw/pyflakes-vim"&gt;Github repository&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pypi.python.org/pypi/pyflakes"&gt;Pyflakes&lt;/a&gt; is syntax checking and linting library for python. The vim plugin for same is provides me with syntax check right inside vim. It notifies me of any module I have imported but not used, variables I have assigned and not used, syntax errors etc.&lt;/p&gt;
&lt;p&gt;Check out the red squiggly lines pointing out an unused variable and a indentation error in the screenshot below; a relevant error message will appear in the statusbar when the cursor is on the error in question.&lt;/p&gt;
&lt;p&gt;&lt;a href="/media/img/content/vim-pyflakes.png" title="Pyflakes"&gt;&lt;img alt="PyFlakes" src="/media/img/content/vim-pyflakes.png" title="Pyflakes" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Installation&lt;/h3&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/.vim
&lt;span class="nv"&gt;$ &lt;/span&gt;git submodule add git://github.com/kevinw/pyflakes-vim.git bundle/pyflakes
&lt;span class="nv"&gt;$ &lt;/span&gt;git submodule init &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git submodule update
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Usage&lt;/h3&gt;
&lt;p&gt;Pyflakes should start working automatically as soon as you install it.&lt;/p&gt;
&lt;h2&gt;6. NERDCommenter: Fast comment manipulations&lt;/h2&gt;
&lt;p&gt;&amp;raquo; &lt;a href="https://github.com/scrooloose/nerdcommenter"&gt;Github repository&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NERDCommenter provides a bunch of key mapping for working with comments in a very fast and efficient manner.&lt;/p&gt;
&lt;h3&gt;Installation&lt;/h3&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/.vim
&lt;span class="nv"&gt;$ &lt;/span&gt;git submodule add git://github.com/scrooloose/nerdcommenter.git bundle/nerdcommenter
&lt;span class="nv"&gt;$ &lt;/span&gt;git submodule init &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git submodule update
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Usage&lt;/h3&gt;
&lt;p&gt;Some useful key mappings that I use regularly are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[count]&amp;lt;leader&amp;gt;ci&lt;/code&gt; - Toggles the comment state of the selected line(s) individually.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[count]&amp;lt;leader&amp;gt;cy&lt;/code&gt;- Same as &lt;leader&gt;cc except that the commented line(s) are yanked first.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;leader&amp;gt;c$&lt;/code&gt; - Comments the current line from the cursor to the end of line.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;leader&amp;gt;cA&lt;/code&gt; - Adds comment delimiters to the end of line and goes into insert mode between them.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For complete list of NERDCommenter commands see &lt;code&gt;:help NERDCommenter&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;7. SuperTab: Word completion on steriods&lt;/h2&gt;
&lt;p&gt;&amp;raquo; &lt;a href="https://github.com/ervandew/supertab"&gt;Github repository&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SuperTab let's me do all my insert mode completion using the &lt;code&gt;&amp;lt;TAB&amp;gt;&lt;/code&gt; key.&lt;/p&gt;
&lt;h3&gt;Installation&lt;/h3&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/.vim
&lt;span class="nv"&gt;$ &lt;/span&gt;git submodule add git://github.com/vim-scripts/supertab.git bundle/supertab
&lt;span class="nv"&gt;$ &lt;/span&gt;git submodule init &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git submodule update
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Usage&lt;/h3&gt;
&lt;p&gt;Type a couple of letters of the word and press &lt;code&gt;Tab&lt;/code&gt; key and if it occurs somewhere in the open buffers, SuperTab will autocomplete it. E.g. typing &lt;code&gt;He&amp;lt;TAB&amp;gt;&lt;/code&gt;will popup a list of words from open buffers that start with &lt;strong&gt;&lt;em&gt;He&lt;/em&gt;&lt;/strong&gt;. (See screenshot)&lt;/p&gt;
&lt;p&gt;&lt;a href="/media/img/content/supertab.png" title="SuperTab"&gt;&lt;img alt="SuperTab" src="/media/img/content/supertab.png" title="SuperTab" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SuperTab also works with vim's builtin autocomplete feature OmniComplete. Just add following line after your OmniComplete configurations.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:SuperTabDefaultCompletionType &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;context&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;8. Fugitive: Git integration&lt;/h2&gt;
&lt;p&gt;&amp;raquo; &lt;a href="https://github.com/tpope/vim-fugitive"&gt;Github repository&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If had to pick the most awesome vim plugin, it would definitely be Fugitive. It provides an amazingly deep Git integration for vim.&lt;/p&gt;
&lt;h3&gt;Installation&lt;/h3&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/.vim
&lt;span class="nv"&gt;$ &lt;/span&gt;git submodule add git://github.com/tpope/vim-fugitive.git bundle/fugitive
&lt;span class="nv"&gt;$ &lt;/span&gt;git submodule init &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git submodule update
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Usage&lt;/h3&gt;
&lt;p&gt;I am not even going to attempt describing Fugitive usage here. I would rather point you to the awesome &lt;a href="http://vimcasts.org/blog/2011/05/the-fugitive-series/"&gt;5 Part Fugitive Screecasts Series&lt;/a&gt; by &lt;a href="http://drewneil.com/"&gt;Drew Neil&lt;/a&gt;. Go, Learn!&lt;/p&gt;
&lt;h2&gt;9. Tagbar: Awesome source code [tag]browsing&lt;/h2&gt;
&lt;p&gt;&amp;raquo; &lt;a href="https://github.com/majutsushi/tagbar"&gt;Github repository&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Tagbar displays the tags of the current file in a sidebar, similar to Taglist, but in a super sexy way - ordered by scope.&lt;/p&gt;
&lt;p&gt;&lt;a href="/media/img/content/tagbar.png" title="Tagbar"&gt;&lt;img alt="Tagbar" src="/media/img/content/tagbar.png" title="Tagbar" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Installation&lt;/h3&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo aptitude install exuberant-ctags  &lt;span class="c"&gt;# Required by Tagbar&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/.vim
&lt;span class="nv"&gt;$ &lt;/span&gt;git submodule add git://github.com/majutsushi/tagbar.git bundle/tagbar
&lt;span class="nv"&gt;$ &lt;/span&gt;git submodule init &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git submodule update
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Tagbar does not need any configuration by default and can be opened by &lt;code&gt;:TagbarOpen&lt;/code&gt; or &lt;code&gt;:TagbarToggle&lt;/code&gt;, but I have configured it as follows&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:tagbar_usearrows &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;l&lt;/span&gt; :TagbarToggle&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;10. Solarized Colorscheme&lt;/h2&gt;
&lt;p&gt;&amp;raquo; &lt;a href="https://github.com/altercation/vim-colors-solarized"&gt;Github repository&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Solarized is the awesome colorscheme for vim(and many other apps) by &lt;a href="http://ethanschoonover.com"&gt;Ethan Schoonover&lt;/a&gt;. It provides both light and dark versions. You have already seen the dark colorscheme in the screenshots included above. Here is a screenshots of light version.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://ethanschoonover.com/solarized/img/screen-python-light.png"&gt;&lt;img alt="Solarized" src="http://ethanschoonover.com/solarized/img/screen-python-light.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Installation&lt;/h3&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/.vim
&lt;span class="nv"&gt;$ &lt;/span&gt;git submodule add  git://github.com/altercation/vim-colors-solarized.git bundle/solarized
&lt;span class="nv"&gt;$ &lt;/span&gt;git submodule init &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git submodule update
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Usage&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/altercation/vim-colors-solarized/blob/master/README.mkd"&gt;Solarized Vim README&lt;/a&gt; contains detailed configuration documentation; here is how I configured my instance&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;background&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;dark&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:solarized_termtrans&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:solarized_termcolors&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;256&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:solarized_contrast&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;high&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:solarized_visibility&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;high&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;colorscheme&lt;/span&gt; solarized
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you want to use solarized in the terminal vim you will need to set &lt;code&gt;TERM&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;TERM&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;xterm-256color&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can also use &lt;a href="https://github.com/godlygeek/csapprox"&gt;CSAprox&lt;/a&gt; plugin to use gvim themes inside terminal vim.&lt;/p&gt;
&lt;h2&gt;The rest&lt;/h2&gt;
&lt;p&gt;While the plugins described above are the ones without which I cannot even imagine working sanely, they are not the only ones. I use a variety of utility and syntax plugins. Some of them are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/tpope/vim-surround"&gt;Surround&lt;/a&gt; - For editing the surroundings of text.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vim-scripts/Better-CSS-Syntax-for-Vim"&gt;Better CSS Syntax&lt;/a&gt; - Provides better CSS syntax highlighting.&lt;/li&gt;
&lt;li&gt;&lt;a href="github.com/ap/vim-css-color"&gt;Vim CSS Color&lt;/a&gt; - Sets background of color hex codes to what they are.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/godlygeek/csapprox"&gt;CSAprox&lt;/a&gt; - Allows use of GVim color schemes in almost all terminals&lt;/li&gt;
&lt;li&gt;Syntax plugins for various programming languages like JavaScript, HTML/XML, PHP, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For curious minds, my vim configurations(along with some other stuff) is available at &lt;a href="https://github.com/mnazim/dotfiles"&gt;github.com/mnazim/dotfiles&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;h4&gt;Updates&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;August 22, 2011:&lt;/em&gt;&lt;/strong&gt; Corrected some mistakes and updated some obsolete repositories to active ones, thanks to the good people over at &lt;a href="http://news.ycombinator.com/item?id=2910350"&gt;Hacker News&lt;/a&gt;, &lt;a href="http://www.reddit.com/r/vim/comments/jkvl9/list_of_vim_plugins_i_use_with_mini_tutorials/"&gt;Reddit&lt;/a&gt; and Stéfan van der Walt who took the time to drop me an email.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;August 26, 2011:&lt;/em&gt;&lt;/strong&gt; A few readers reported confusing language in the para defining soft-linking of files and directories inside &lt;code&gt;~/dotfiles&lt;/code&gt; to relevant locations. Changed naration and added the example commands to be more explicit.&lt;/p&gt;</summary><category term="vim"></category><category term="editor"></category><category term="programming"></category></entry><entry><title>Vim is my choice</title><link href="http://mirnazim.org/writings/vim-is-my-choice" rel="alternate"></link><updated>2010-04-25T02:15:00+02:00</updated><author><name>Mir Nazim</name></author><id>tag:mirnazim.org,2010-04-25:writings/vim-is-my-choice</id><summary type="html">&lt;p&gt;I have been doing programming for 8 years now(6 years professionally). Given the &lt;a href="http://blogoscoped.com/archive/2005-08-24-n14.html"&gt;lazy &amp;amp; dumb person&lt;/a&gt; I am, I am always on a constant lookout for new tools to make my job easy by every passing day. The most important tool in your armoury as a programmer is your text editor. Why the most important? Because that's where you write the code(off course assuming you are not "&lt;a href="http://xkcd.com/378/"&gt;The Real Programmer&lt;/a&gt;").&lt;/p&gt;
&lt;p&gt;I have used many text editors and IDE in past years. I used Eclipse, NetBeans, Komodo IDE/Edit, Notepad++(still use it if I have to(unavoidably) work on Windows). Tried my best to use GEdit and Kate as productively as possible. With some of these I started off very well; even enjoyed my ride for sometime. But all of them starting falling apart at one point or the other. Some where monsters and others where simply dumb when it came to any sort of serious text manipulation.&lt;/p&gt;
&lt;p&gt;Then about 6 months back, I started thinking seriously about switching to either Emacs or Vim. Emacs was my first choice because I thought modal editing of Vim is just too big a PITA and always wondered &lt;a href="http://www.viemu.com/a-why-vi-vim.html"&gt;why do those nutheads used Vim&lt;/a&gt;. Least did I know, remembering a gazillion finger breaking key combinations will drive me crazy within a few days only. I have been using Vim on and off for small editing tasks and when I had ssh to remote machines, but I never tried to learn it properly.&lt;/p&gt;
&lt;p&gt;Suddenly, one day it dawned, on me why Vim is &lt;a href="http://philosecurity.org/2009/03/23/pirates-and-ninjas-emacs-or-vi"&gt;the perfect editor for me&lt;/a&gt; and I said to myself, "enough is enough, I am doing this". Thus started the my journey of Vim discovery. What follows is how I learned to work with Vim. This is in no way the holy grail of learning Vim, its just what worked for me. It might work for you or it might ruin your Vim experience forever. You have been warned. &lt;/p&gt;
&lt;p&gt;Every tutorial, guide or documentation I checked just scared me with all the details and Vim jargon. Moment you open these, either they bore you with how awesome Vim is or throw a long list of never ending Vim commands and modes. What I actually liked and used was this &lt;a href="http://www.viemu.com/a_vi_vim_graphical_cheat_sheet_tutorial.html"&gt;kick ass, super awesome graphical Vim cheatsheet&lt;/a&gt;. It taught me more about vim in 8 pages what no other tutorial/guide could. I slowly worked my way through each page, learning a page and working with it for few days until I was comfortable. Then I would move on to next page and repeat the process.&lt;/p&gt;
&lt;p&gt;My idea of starting with Vim is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Know the 3 modes: Normal mode, Edit mode, Command mode &amp;amp; how to enter/exit the modes &amp;amp; move from one mode to another&lt;/li&gt;
&lt;li&gt;When not editing/entering the text, try to reaming inside Normal mode as much as possible. &lt;/li&gt;
&lt;li&gt;Download the cheatsheet, print it and paste is on the wall directly above your monitor where you can just see it.&lt;/li&gt;
&lt;li&gt;Work through the cheat sheet, 1 page at a time.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Believe you me, thats all how I learned Vim. No big books needed, no lengthy tutorials, no jargon. Just these 8 pages and a great virtue called patience. I still have these pages pasted on the wall in front of me when I work. Also checkout &lt;a href="http://blog.interlinked.org/tutorials/vim_tutorial.html"&gt;this a nice introduction to vim&lt;/a&gt; by &lt;a href="http://blog.interlinked.org/about/index.html"&gt;Micheal Jakl&lt;/a&gt;, only tutorial I know of that introduces Vim modes in 3 lines and single diagram. &lt;/p&gt;
&lt;p&gt;You just need the basics, everything thing else about vim can wait. If somebody tells you that you need to understand the vim philosophy to use it well, tell them to mind their own damn business; You do not, not at the beginning; Once you start loving vim, the philosophy will dawn on you automatically. If someone asks you to disable the arrow keys and only use &lt;code&gt;h,j,k,l&lt;/code&gt;, plug your ears with your fingers as tight as you can; Once you start picking up more and more of vim, you will disable arrow keys without anyone telling you to do so.&lt;/p&gt;
&lt;p&gt;Now coming back to my story, I am happily settled with Vim not and am pretty sure that Vim and me are going to stay married for quite a long time. I am still learning, there are still a huge number of things, which I know nothing of; but I have learned from the awesome FOSS community; which we should be really proud of. &lt;/p&gt;
&lt;p&gt;My vim configurations along with bash and some others, are available at &lt;a href="http://github.com/mnazim/dotfiles"&gt;github.com/mnazim/dotfiles&lt;/a&gt;. Fork it, use it the way you like. Don't forget share it back.&lt;/p&gt;</summary><category term="vim"></category><category term="editor"></category><category term="programming"></category></entry></feed>